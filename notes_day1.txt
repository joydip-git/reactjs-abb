React JS:
js library create UI component based front-end app

component? view with functionalities
client-side web app?
spa: single page app 



Node JS: server side JS framework
NPM: Node package manager (helps ypu to download packages)

modular concept

module: represents a JS file in node runtime

module format: (the way you export and import)
	a. Common JS (default format for Node JS)
	b. AMD (asynchronous module definition)
	c. UMD (universal module definition)
	d. ES6 import/export

define([], function(){

	function add (a,b){}
	function sub(a,b){}
})

module loader: who understands a module format, resolves it and loads the interlinked files
	a. requirejs
	b. systemjs

the requirejs loader needs JS module to be written in AMD format

solution:
1. write JS code in AMD module format
2. write your JS code in import/export format and get it converted to AMD automatically


ES6 : ECMAScript 6
older version (Es5, ES3, Es2, ...) <ES6
2015: class, extends, import, export, arrow function, let, const, ..................
ES6, .... ES11/12

write code using new features of JS
get it converted to older version of JS using a tool=> transpiler

babel, tsc

babel: 
written using Node JS
convert latest JS code to older version of JS, convert modules from one format to other

command to create package.json with default values: npm init --yes

npm install @babel/core @babel/cli -D
npm install @babel/plugin-transform-modules-amd

D: development depedency (--save-dev)
complete dependency: (--save) or nothing

>npm i create-react-app -g
>create-react-app my-first-app

or...
>npx create-react-app my-first-app

prop
state

to define and validate properties of a component: prop-types
>npm i prop-types

import PropTypes from 'prop-types'
function Comp(){}

Comp.propTypes={
	prop-name1:PropTypes.data-type.isRequired,
	prop-name2:PropTypes.data-type,
}

react js:
	a. functional components
	b. class components

//1. object literal syntax
const joydipObj = {

	//value properties
	name:'Joydip',
	id:1,
	salary:1000,

	//functional property
	print:function(){
		return this.name +' '+this.id+' ' +this.salary
	}
}

//2. constructor function
function person(name, id, salary){
	this.id = id
	this.name = name
	this.salary = salary
	this.print = function(){
		return this.name +' '+this.id+' ' +this.salary
	}
}

const joydipPerson = new person('Joydip',1,1000)

class Person{
   constructor(name, id, salary){
	this.id = id
	this.name = name
	this.salary = salary	
   }
   print(){		
       return this.name +' '+this.id+' ' +this.salary
   }
}

1. component maintains a data in the state
2. anyone updates the state data, react detects it
	a. in order to update state data, use built-in method setState() from Component class
		- update the state data async and when done, calles the render funtion to recreate the VDOM
3. immediately calles the render() function of the component again









	